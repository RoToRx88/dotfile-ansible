call plug#begin('~/.vim/plugged')
Plug 'SirVer/ultisnips'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'chr4/nginx.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dense-analysis/ale'  " Asynchronous Lint Engine
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'gabrielelana/vim-markdown'
Plug 'hashivim/vim-terraform'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'kovetskiy/sxhkd-vim'
Plug 'kovetskiy/sxhkd-vim'  " Handle sxhkd files properly w/ indent + color
Plug 'mileszs/ack.vim'
Plug 'pearofducks/ansible-vim', { 'do': './UltiSnips/generate.sh' }
Plug 'phenomenes/ansible-snippets', { 'tag': 'v2.7.9' }
Plug 'psliwka/vim-smoothie'
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'stevearc/vim-arduino'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-commentary'  " Manage comments with <Leader>gc
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vitapluvia/vim-gurl'
call plug#end()

"-- MISC --"
""""""""""""

" Allow backspace in insert mode.
set backspace=indent,eol,start

" Always show window statuses, even if there's only one.
set laststatus=2

" Better be safe than sorry
set nocompatible

" Force utf-8 encoding
set encoding=utf-8

" Set default whitespace characters when using `:set list`
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

" Delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j
endif

" Search upwards for tags file instead only locally
if has('path_extra')
  setglobal tags-=./tags tags^=./tags;
endif

" Reload unchanged files automatically.
set autoread

" Increase history size to 1000 items.
set history=1000

" Allow for up to 50 opened tabs on Vim start.
set tabpagemax=50

" Always save upper case variables to viminfo file.
set viminfo^=!

"-- EDITOR --"
""""""""""""""

" Show the line and column number of the cursor position.
set ruler

" Autocomplete commands using nice menu in place of window status.
" Enable `Ctrl-N` and `Ctrl-P` to scroll through matches.
set wildmenu

" Indentation settings
set tabstop=2
set autoindent
set shiftwidth=2

" space instead of tabs
set expandtab

" Matching braces
set showmatch

" Line numbers
set number

" Underline the current cursor line
set cursorline

" Smart numbers
set relativenumber

" Use 'shiftwidth' when using `<Tab>` in front of a line.
" By default it's used only for shift commands (`<`, `>`).
set smarttab

" Load shell aliases and settings
set shell=zsh

" Put swap files in fixed place
set swapfile
set dir=~/.vim/swap
" Put undo files in fixed place
set undofile
set undodir=~/.vim/undo

" disabling auto commenting on new line, e.g. 'o' and 'O'
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Y yanks from the cursor to the end of line as expected. See :help Y.
nnoremap Y y$

"-- VISUAL --"
""""""""""""""

syntax enable

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
  set t_Co=16
endif

if &t_Co >= 256
  set termguicolors
end

" Theme
"colorscheme PaperColor
"set background=dark

" Highlight trailing white space end of line
:highlight ExtraWhiteSpace ctermbg=red guibg=red
call matchadd('ExtraWhiteSpace', '\s\+$')

"-- SEARCH --"
""""""""""""""

" Highlight search. See mappings to disable highlighting when search is done
set hlsearch

" Search parameters
set ignorecase
set smartcase
set incsearch

" Shell search to ignore case sensitivty
set wildignorecase


"-- REMAPPING --"
"""""""""""""""""

" Replace default hjkl with jkl; for better finger position
"noremap ; l
"noremap l k
"noremap k j
" noremap j h

" Auto complete scroll up/down
inoremap <expr> j ((pumvisible())?("\<C-n>"):("j"))
inoremap <expr> k ((pumvisible())?("\<C-p>"):("k"))
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

"-- MAPPINGS --"
""""""""""""""""

" Set mapleader to space by default
if !exists("mapleader")
  let mapleader = "\<Space>"
endif

" Remap yank / paste to use CLIPBOARD
"noremap <Leader>c "+y
"noremap <Leader>v "+p

" Make it easy to edit Vimrc
nmap <Leader>ev :tabedit $MYVIMRC<cr>

" Make it easy to edit Zshrc
nmap <Leader>ez :tabedit ~/.zshrc<cr>

" Remove search higlight
nmap <Leader><space> :nohlsearch<cr>

" Close buffer /w window
nmap <Leader>d :bd<cr>

" Toggle left tree
nmap <Leader>/ :NERDTreeToggle<cr>
nmap <Leader>? :NERDTreeFind<cr>

"Close vinegar
nmap <Leader>k :bd<cr>

" Quickly execute shell command
nmap <Leader>ss :! 

" Set nginx syntax
nmap <Leader>sn :set ft=nginx<cr>

" Show tab and return to line (enable)
nmap <Leader>se :set list<cr>

" Show tab and return to line (disable)
nmap <Leader>sd :set nolist<cr>

" Show markdown TOC
nmap <Leader>mt :Toch<cr>

" Toggle set paste / notpaste
nmap <Leader>p :set paste<cr>
nmap <Leader>P :set nopaste<cr>

" Save & quit actions
nmap <Leader>w :w<cr>
nmap <Leader>x :x<cr>
nmap <Leader>c :q<cr>
nmap <Leader>fc :qa<cr>

" VimGrep
nmap [q :cprev<cr>
nmap ]q :cnext<cr>
nmap [Q :cfirst<cr>
nmap ]Q :clast<cr>

" CtrlP
nmap <c-b> :CtrlPBuffer<cr>

" Remove comment at beginning of line
nmap <Leader>uc ^xA

"-- AUTO COMMANDS --"
"""""""""""""""""""""

" Disable expandtab for Makefile files
autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0

" Enable javascript syntax for typescript files
autocmd BufNewFile,BufRead *.ts setlocal ft=javascript noexpandtab

" Automatically source the Vimrc file on save
augroup autosourcing
  autocmd!
  autocmd BufWritePost .vimrc source %
augroup END

"-- SPLIT MANAGMENT --"
"""""""""""""""""""""""

" Default split position
set splitbelow
set splitright

" Split management with jkl;
nnoremap aj <C-W><C-H>
nnoremap ak <C-W><C-J>
nnoremap al <C-W><C-K>
nnoremap a; <C-W><C-L>

" Rotate / Inverse two window
nnoremap ar <C-W>r
nnoremap aR <C-W>R
" Switch the window into a new tab
nnoremap aT <C-W>T
" Switch the window into a new tab
nnoremap a<Enter> <C-W><Enter>
" Close all but this One
nnoremap ao <C-W>o
" Take all the height
nnoremap a_ <C-W>_
" Take all the width
nnoremap a\| <C-W>\|
" Equal width/height
nnoremap a= <C-W>=

" Switch tabs

nmap <tab> gt
nmap <s-tab> gT

"-- PLUGINS --"
"""""""""""""""

"/
"/ vim-arduino
"/
"/ Develop, compile, upload arduino code from within vim

let g:arduino_cmd = '/usr/bin/arduino'
let g:arduino_dir = '/usr/share/arduino'

"/
"/ vim-gurl
"/
"/ Use CLIPBOARD register when generating link to line ( use <Leader>+t )

noremap <leader>gr :call Gurl()<CR>
let g:vimgurl_yank_register = '+'


"/
"/ ansible-vim
"/
"/ Reset indent to 0 after two new lines
let g:ansible_unindent_after_newline = 1

"/ Highlight additional keywords in playbooks
let g:ansible_extra_keywords_highlight = 1

"/ Force filetype
au BufRead,BufNewFile */playbooks/*.yml set filetype=yaml


"/
"/ CtrlP
"/
let g:ctrlp_custom_ignore = 'node_modules/DS_Store\|git\|vendor'

let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:30,results:30'
let g:ctrlp_tabpage_position = 'ac'
let g:ctrlp_working_path_mode = 0
" Prevent file from being opened in nerd tree
let g:ctrlp_cmd = ':NERDTreeClose\|CtrlP'

"/
"/ NerdTree
"/
" Prevent NerdTree from overriding - vinegar shortcut
let NERDTreeHijackNetrw = 0
let NERDTreeShowHidden = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeIgnore = ['\.swp$', '\~$', '.git$[[dir]]']

"/
"/ Vinegar
"/
"
" Hide hidden files by default
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_banner       = 0
let g:netrw_liststyle    = 3
let g:netrw_sort_options = 'i'

"/
"/ Markdown
"/
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_toc_autofit = 1

"/
"/ Airline
"/
let g:airline_highlighting_cache = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='base16_gruvbox_dark_hard'


"/
"/ Polygot
"/
let g:polyglot_disabled = ['markdown']


"/
"/ UltiSnips
"/
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']
let g:UltiSnipsEditSplit="vertical"

"/
"/ LeaderF
"/

let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
" let g:Lf_CommandMap = {'<C-K>': ['<Up>'], '<C-J>': ['<Down>']}
let g:Lf_ShowDevIcons = 0
let g:Lf_ShortcutF = "<leader>ff"
noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>
" noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>

"/
"/ Custom filetype
"/
vnoremap . :norm.<CR>

augroup vagrant
	au!
	au BufRead,BufNewFile Vagrantfile set filetype=ruby
augroup END

au BufRead,BufNewFile */etc/nginx/sites-availables/* set ft=nginx
au BufRead,BufNewFile */etc/nginx/conf.d/* set ft=nginx

" General colors
"if has('gui_running') || has('nvim')
"    hi Normal 		guifg=#f6f3e8 guibg=#1c1c1c
"else
"    " Set the terminal default background and foreground colors, thereby
"    " improving performance by not needing to set these colors on empty cells.
"    hi Normal guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE
"    let &t_ti = &t_ti . "\033]10;#f6f3e8\007\033]11;#1c1c1c\007"
"    let &t_te = &t_te . "\033]110\007\033]111\007"
"endif
